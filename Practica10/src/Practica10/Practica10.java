/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Practica10;

import java.awt.BorderLayout;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;

/**
 *
 * @author riemann
 */
public class Practica10 extends javax.swing.JFrame {
    
    private CompresionWorker worker;
    private JFileChooser fileChooserDestino;
    private JFileChooser fileChooserOrigen;
    private JProgressBar progressBar;
    private JButton cancelButton;
    private JDialog progressDialog;

    
    private void prepareProgressDialog() {
        progressDialog = new JDialog(this, "Compresión en Progreso", true);
        progressBar = new JProgressBar(0, 100);
        progressBar.setStringPainted(true);
        cancelButton = new JButton("Cancelar");
        cancelButton.addActionListener(e -> {
            if (worker != null) {
                worker.cancel(true);
            }
        });

        JPanel panel = new JPanel(new BorderLayout());
        panel.add(progressBar, BorderLayout.CENTER);
        panel.add(cancelButton, BorderLayout.SOUTH);
        progressDialog.add(panel);
        progressDialog.pack();
    }

private class CompresionWorker extends SwingWorker<Void, Integer> {
    private File carpetaOrigen;
    private File destinoZip;
    

    public CompresionWorker(File carpetaOrigen, File destinoZip) {
        this.carpetaOrigen = carpetaOrigen;
        this.destinoZip = destinoZip;
        
    }

  
    
    @Override
    protected Void doInBackground() throws Exception {
        // Obtén la lista de archivos en la carpeta origen
        File[] archivos = carpetaOrigen.listFiles();
        if (archivos == null) return null;

        try (ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream(destinoZip))) {
            for (int i = 0; i < archivos.length; i++) {
                if (archivos[i].isFile()) {
                    // Agrega archivo al ZIP
                    ZipEntry zipEntry = new ZipEntry(archivos[i].getName());
                    zipOut.putNextEntry(zipEntry);
                    try (FileInputStream fis = new FileInputStream(archivos[i])) {
                        byte[] buffer = new byte[1024];
                        int length;
                        while ((length = fis.read(buffer)) >= 0) {
                            zipOut.write(buffer, 0, length);
                        }
                    }
                    zipOut.closeEntry();
                }

                // Actualiza el progreso
                int progreso = (int) ((i + 1) * 100 / archivos.length);
                publish(progreso);
            }
        }

        return null;
    }

    @Override
    protected void process(List<Integer> chunks) {
        int ultimoProgreso = chunks.get(chunks.size() - 1);
        progressBar.setValue(ultimoProgreso);
    }

    @Override
    protected void done() {
        if (isCancelled()) {
            JOptionPane.showMessageDialog(null, "Compresión cancelada");
        } else {
            JOptionPane.showMessageDialog(null, "Compresión completada");
        }
    }
}

    /**
     * Creates new form Practica10
     */
    public Practica10() {
        initComponents();
        
        fileChooserOrigen = new JFileChooser();
        fileChooserOrigen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        fileChooserDestino = new JFileChooser();
        fileChooserDestino.setFileSelectionMode(JFileChooser.FILES_ONLY);
        progressBar = new JProgressBar();
        prepareProgressDialog();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        Abrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Ayuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Archivo.setText("Archivo");

        Abrir.setText("Abrir");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        Archivo.add(Abrir);
        Archivo.add(jSeparator1);

        jMenuBar1.add(Archivo);

        Ayuda.setText("Edit");
        jMenuBar1.add(Ayuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 739, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        // TODO add your handling code here:
        
           if (fileChooserOrigen.showOpenDialog(this) == fileChooserOrigen.APPROVE_OPTION) {
              File fileSelected = fileChooserOrigen.getSelectedFile();
              iniciarCompresion();
        }
    }//GEN-LAST:event_AbrirActionPerformed
    
    
    private void iniciarCompresion() {
        File carpetaOrigen = fileChooserOrigen.getSelectedFile();
        
        if (carpetaOrigen == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una carpeta origen.");
            return;
        }
        
        //Nombre del archivo comprimido
        String nombreArchivoPredeterminado = carpetaOrigen.getName() + ".zip";
        fileChooserDestino.setSelectedFile(new File(nombreArchivoPredeterminado));

        int seleccion = fileChooserDestino.showSaveDialog(this);
        File destinoZip = null;
        
        if (seleccion == JFileChooser.APPROVE_OPTION) {
        destinoZip = fileChooserDestino.getSelectedFile();
        
        //extencion .zip
        if (!destinoZip.getName().toLowerCase().endsWith(".zip")) {
            destinoZip = new File(destinoZip.getAbsolutePath() + ".zip");
        }
        
        // Crear y configurar la barra de progreso
        progressBar = new JProgressBar(0, 100);
        progressBar.setStringPainted(true);
        progressBar.setVisible(true);
        
        // Crear y configurar el botón de cancelar
        JButton botonCancelar = new JButton("Cancelar");
        botonCancelar.setVisible(true);
        
        
        worker = new CompresionWorker(carpetaOrigen, destinoZip);
        worker.execute();
        
        } else {
            JOptionPane.showMessageDialog(this, "Selección de archivo destino cancelada.");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Practica10().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenu Ayuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
